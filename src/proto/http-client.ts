// This file was autogenerated from a .proto file, DO NOT EDIT!
import { fetchAdapter } from './fetch-adapter';
import * as Types from './types'
export type ResultError = { status: 'ERROR', reason: string }

export type ClientParams = {
    baseUrl: string
    retrieveGuestAuth: () => Promise<string | null>
    retrieveAccessTokenAuth: () => Promise<string | null>
    retrieveUserAuth: () => Promise<string | null>
    encryptCallback: (plain: any) => Promise<any>
    decryptCallback: (encrypted: any) => Promise<any>
    deviceId: string
    checkResult?: true
}
export default (params: ClientParams) => ({
    GetNostrPubKey: async (): Promise<ResultError | ({ status: 'OK' }& Types.UserNostrPubKey)> => {
        const auth = await params.retrieveAccessTokenAuth()
        if (auth === null) throw new Error('retrieveAccessTokenAuth() returned null')
        let finalRoute = '/api/user/pubkey'
        const { data } = await fetchAdapter.get(params.baseUrl + finalRoute, {
			headers: { 'authorization': auth }
		});
        if (data.status === 'ERROR' && typeof data.reason === 'string') return data
        if (data.status === 'OK') { 
            const result = data
            if(!params.checkResult) return { status: 'OK', ...result }
            const error = Types.UserNostrPubKeyValidate(result)
            if (error === null) { return { status: 'OK', ...result } } else return { status: 'ERROR', reason: error.message }
        }
        return { status: 'ERROR', reason: 'invalid response' }
    },
    GetNostrRelays: async (): Promise<ResultError | ({ status: 'OK' }& Types.NostrRelays)> => {
        const auth = await params.retrieveAccessTokenAuth()
        if (auth === null) throw new Error('retrieveAccessTokenAuth() returned null')
        let finalRoute = '/api/user/relays'
        const { data } = await fetchAdapter.get(params.baseUrl + finalRoute, {
			headers: { 'authorization': auth }
		});
        if (data.status === 'ERROR' && typeof data.reason === 'string') return data
        if (data.status === 'OK') { 
            const result = data
            if(!params.checkResult) return { status: 'OK', ...result }
            const error = Types.NostrRelaysValidate(result)
            if (error === null) { return { status: 'OK', ...result } } else return { status: 'ERROR', reason: error.message }
        }
        return { status: 'ERROR', reason: 'invalid response' }
    },
    SignNostrEvent: async (request: Types.NostrSignRequest): Promise<ResultError | ({ status: 'OK' }& Types.NostrSignResponse)> => {
        const auth = await params.retrieveAccessTokenAuth()
        if (auth === null) throw new Error('retrieveAccessTokenAuth() returned null')
        let finalRoute = '/api/user/sign'
        const { data } = await fetchAdapter.post(params.baseUrl + finalRoute, request, {
			headers: { 'authorization': auth }
		});
        if (data.status === 'ERROR' && typeof data.reason === 'string') return data
        if (data.status === 'OK') { 
            const result = data
            if(!params.checkResult) return { status: 'OK', ...result }
            const error = Types.NostrSignResponseValidate(result)
            if (error === null) { return { status: 'OK', ...result } } else return { status: 'ERROR', reason: error.message }
        }
        return { status: 'ERROR', reason: 'invalid response' }
    },
    Nip44Decrypt: async (request: Types.Nip44DecryptRequest): Promise<ResultError | ({ status: 'OK' }& Types.Nip44DecryptResponse)> => {
        const auth = await params.retrieveAccessTokenAuth()
        if (auth === null) throw new Error('retrieveAccessTokenAuth() returned null')
        let finalRoute = '/api/user/decrypt'
        const { data } = await fetchAdapter.post(params.baseUrl + finalRoute, request, {
			headers: { 'authorization': auth }
		});
        if (data.status === 'ERROR' && typeof data.reason === 'string') return data
        if (data.status === 'OK') { 
            const result = data
            if(!params.checkResult) return { status: 'OK', ...result }
            const error = Types.Nip44DecryptResponseValidate(result)
            if (error === null) { return { status: 'OK', ...result } } else return { status: 'ERROR', reason: error.message }
        }
        return { status: 'ERROR', reason: 'invalid response' }
    },
    Nip44Encrypt: async (request: Types.Nip44EncryptRequest): Promise<ResultError | ({ status: 'OK' }& Types.Nip44EncryptResponse)> => {
        const auth = await params.retrieveAccessTokenAuth()
        if (auth === null) throw new Error('retrieveAccessTokenAuth() returned null')
        let finalRoute = '/api/user/encrypt'
        const { data } = await fetchAdapter.post(params.baseUrl + finalRoute, request, {
			headers: { 'authorization': auth }
		});
        if (data.status === 'ERROR' && typeof data.reason === 'string') return data
        if (data.status === 'OK') { 
            const result = data
            if(!params.checkResult) return { status: 'OK', ...result }
            const error = Types.Nip44EncryptResponseValidate(result)
            if (error === null) { return { status: 'OK', ...result } } else return { status: 'ERROR', reason: error.message }
        }
        return { status: 'ERROR', reason: 'invalid response' }
    },
    Nip98Event: async (request: Types.Nip98EventRequest): Promise<ResultError | ({ status: 'OK' }& Types.Nip98EventResponse)> => {
        const auth = await params.retrieveAccessTokenAuth()
        if (auth === null) throw new Error('retrieveAccessTokenAuth() returned null')
        let finalRoute = '/api/user/nip98'
        const { data } = await fetchAdapter.post(params.baseUrl + finalRoute, request, {
			headers: { 'authorization': auth }
		});
        if (data.status === 'ERROR' && typeof data.reason === 'string') return data
        if (data.status === 'OK') { 
            const result = data
            if(!params.checkResult) return { status: 'OK', ...result }
            const error = Types.Nip98EventResponseValidate(result)
            if (error === null) { return { status: 'OK', ...result } } else return { status: 'ERROR', reason: error.message }
        }
        return { status: 'ERROR', reason: 'invalid response' }
    },
})
